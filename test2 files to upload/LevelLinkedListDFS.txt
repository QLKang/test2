package kql.test.practise;
/*                30
 *           /           \
 *       15                 44
 *      /                 /    \ 
 *   7                 37       30
 *  / \               /  \     /   \ 
 * 2   9            33   40   47   61  

 * I use depth first search to create linked list
 * class:
 *  LevelLinkedList:	public
 *  TreeNode:	default
 * 
 * Instances: 
 *  levels: an ArrayList<LinkedList<TreeNode>>, store all the levels
 *  levelList:	LinkedList<TreeNode>, store the nodes in the same level
 * 
 *  Method:
 *   createLevelLinkedList(root, level)
 *   createLevelLinkedList(root)
 *   main
 */
import java.util.ArrayList;
import java.util.LinkedList;
//-----------------------main body------------------------------
public class LevelLinkedList {
	ArrayList<LinkedList<TreeNode>> levels = new ArrayList<LinkedList<TreeNode>>();
	LinkedList<TreeNode> levelList = null;

	// Method:-------------------
	public void createLevelLinkedList(TreeNode root, int level) {
//		if(root!=null){root.setLevel(level);} // never be used
		if (root != null && level >= 0) {
			if (levels.size() < level+1) {
				levelList = new LinkedList<TreeNode>();
				levels.add(levelList);
				levelList.add(root);
			} else if (levels.size() >= level+1) {
				levelList = levels.get(level);
				levelList.add(root);
			}
			createLevelLinkedList(root.left, level + 1);
			createLevelLinkedList(root.right, level + 1);
		} // end if
	} // end method
	//-------------------
	public void createLevelLinkedList(TreeNode root) {
		int level = 0;
		if (root == null) {
			return;
		}
		createLevelLinkedList(root, level);
	}
//---------------------------------------------------------------------------------------------------
	// ------- for test --------
	public static void main(String[] args) {
		// create a tree for test
//		TreeNode r = null;
		TreeNode r = new TreeNode(30);
		r.left = new TreeNode(15);
		r.right = new TreeNode(44);
		r.left.left = new TreeNode(7);
//		r.left.right = new TreeNode(23);
		r.right.left = new TreeNode(37);
		r.right.right = new TreeNode(30);
		r.left.left.left = new TreeNode(2);
		r.left.left.right = new TreeNode(9);
//		r.left.right.left = new TreeNode(19);
//		r.left.right.right = new TreeNode(27);
		r.right.left.left = new TreeNode(33);
		r.right.left.right = new TreeNode(40);
		r.right.right.left = new TreeNode(47);
		r.right.right.right = new TreeNode(61);
		// ----created tree, end----
		DFSLevelLinkedList lll = new DFSLevelLinkedList();
		lll.createLevelLinkedList(r);
		
		for (LinkedList<TreeNode> ll : lll.levels) {
			System.out.print("\n");
			for (TreeNode node : ll) {
				System.out.print(" " + node.getData() + ", ");
			}
		}
	} // end main
} // end class

class TreeNode {
	private int data = 0;
	private int level = 0;
	TreeNode left = null;
	TreeNode right = null;

	public TreeNode(int d) {
		data = d;
	}

	void setData(int d) {	// no use
		data = d;
	}

	int getData() {		// no use
		return data;
	}

	void setLevel(int l) { // no use
		level = l;
	}

	int getLevel() {	// no use
		return level;
	}
}



/*------------------------------------------------------------------------------------------*/
package kql.test.practise;

import java.util.ArrayList;
import java.util.LinkedList;

/*
 Given a binary tree, create linked list for each level
 */
class TreeNode {
	int data = 0;
	TreeNode left = null;
	TreeNode right = null;

	public TreeNode(int d) {
		data = d;
	}
}

/*------------------Jan. 22, 2014-------------------------------------*/
public class CreateLevelLists {
	ArrayList<LinkedList<TreeNode>> levels = new ArrayList<LinkedList<TreeNode>>();
	LinkedList<TreeNode> ll = null;

	ArrayList<LinkedList<TreeNode>> createLists(TreeNode rt, int level) {
		if (level < 0)
			throw new IllegalArgumentException("level is illegal.");
		if (rt == null) {
			return null;
		}
		int size = levels.size();

		if (level > size) {
			ll = new LinkedList<TreeNode>();
			ll.add(rt);
			levels.add(ll);
		} else {
			ll = levels.get(level - 1);
			ll.add(rt);
		}

		createLists(rt.left, level + 1);
		createLists(rt.right, level + 1);

		return levels;

	} // end method

	ArrayList<LinkedList<TreeNode>> createLists(TreeNode rt) {
		int level = 1;
		return createLists(rt, level);
	} // end method
// for test 
	public static void main(String[] args){
		// create tree for test
		TreeNode r = new TreeNode(4);
		TreeNode a = new TreeNode(3);
		TreeNode b = new TreeNode(1);
		TreeNode g = new TreeNode(2);
		TreeNode c = new TreeNode(5);
		TreeNode d = new TreeNode(0);
		TreeNode e = new TreeNode(8);
		TreeNode f = new TreeNode(4);
		r.left = a;
		r.right = b;
		a.right = g;
		b.left = c;
		b.right = d;
		d.left = e;
		d.right = f;
		
	//	TreeNode rt = null;
		CreateLevelLists  cll = new CreateLevelLists();
		ArrayList<LinkedList<TreeNode>> levellists = cll.createLists(r);
		for(LinkedList<TreeNode> ll: levellists){
			for(TreeNode n: ll){
				System.out.print(n.data+" ");
			}
			System.out.println();
		}
	}
	
	
	
	
} // end class




